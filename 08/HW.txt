1. Run a few randomly-generated problems with just two jobs and
two queues; compute the MLFQ execution trace for each. Make
your life easier by limiting the length of each job and turning off
I/Os.

./mlfq.py -s SEED -j JOBS -n QUEUES -m LÄNGE -M MAXIO -c

2. How would you run the scheduler to reproduce each of the exam-
ples in the chapter?

- 8.2: ./mlfq.py -n 3 -q 10 -l 0,200,0 -M 0
  8.3: ./mlfq.py -n 3 -q 10 -l 0,200,0:100,20,0 -M 0
  8.4: ./mlfq.py -n 3 -q 10 -l 0,200,0:50,20,1 -S // -S wegen der alten regeln
  8.5: ./mlfq.py -n 3 -q 10 -l 0,200,0:100,50,1:100,50,1 -i 1 -S // -i 1 für 1 sek/IO
  8.5: ./mlfq.py -n 3 -q 10 -l 0,200,0:100,50,1:100,50,1 -i 1 -S -B 50 // -B booste alle 50ms
  8.6: ./mlfq.py -n 3 -q 10 -l 0,200,0:80,100,9 -i 1 -S
  8.6: ./mlfq.py -n 3 -q 10 -l 0,200,0:80,100,9 -i 1 // kein -S für neue Regeln
  8.7: ./mlfq.py -n 3 -l 0,70,0:0,70,0 -Q 10,20,30

3. How would you configure the scheduler parameters to behave just
like a round-robin scheduler?

- timeslice muss kleiner sein als die max länge jobs geteilt durch anzahl jobs

4. Craft a workload with two jobs and scheduler parameters so that
one job takes advantage of the older Rules 4a and 4b (turned on
with the -S flag) to game the scheduler and obtain 99% of the CPU
over a particular time interval.

./mlfq.py -S -l 0,100,0:0,100,9 -n 3 -i 1 -q 10 -c

5. Given a system with a quantum length of 10 ms in its highest queue,
how often would you have to boost jobs back to the highest priority
level (with the -B flag) in order to guarantee that a single long-
running (and potentially-starving) job gets at least 5% of the CPU?

- Joblänge = Boost

6. One question that arises in scheduling is which end of a queue to
add a job that just finished I/O; the -I flag changes this behavior
for this scheduling simulator. Play around with some workloads
and see if you can see the effect of this flag.